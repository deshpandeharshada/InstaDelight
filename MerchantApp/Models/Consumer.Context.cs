//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MerchantApp.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class instadelight_consumerEntities : DbContext
    {
        public instadelight_consumerEntities()
            : base("name=instadelight_consumerEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<city_master> city_master { get; set; }
        public virtual DbSet<consumergiftcarddetail> consumergiftcarddetails { get; set; }
        public virtual DbSet<consumermaster> consumermasters { get; set; }
        public virtual DbSet<country_master> country_master { get; set; }
        public virtual DbSet<language_master> language_master { get; set; }
        public virtual DbSet<location_master> location_master { get; set; }
        public virtual DbSet<role> roles { get; set; }
        public virtual DbSet<state_master> state_master { get; set; }
        public virtual DbSet<userclaim> userclaims { get; set; }
        public virtual DbSet<userlogin> userlogins { get; set; }
        public virtual DbSet<userrole> userroles { get; set; }
        public virtual DbSet<consumeruser> consumerusers { get; set; }
        public virtual DbSet<consumerbilldetail> consumerbilldetails { get; set; }
        public virtual DbSet<consumercashbackdetail> consumercashbackdetails { get; set; }
        public virtual DbSet<consumerredeemdetail> consumerredeemdetails { get; set; }
        public virtual DbSet<consumerrewardpoint> consumerrewardpoints { get; set; }
        public virtual DbSet<consumersmsdetail> consumersmsdetails { get; set; }
        public virtual DbSet<consumervisitdetail> consumervisitdetails { get; set; }
        public virtual DbSet<consumer_giftcard_otp> consumer_giftcard_otp { get; set; }
        public virtual DbSet<consumer_otp_details> consumer_otp_details { get; set; }
        public virtual DbSet<consumer_coupon_otp> consumer_coupon_otp { get; set; }
        public virtual DbSet<consumergiftcardtransactiondetail> consumergiftcardtransactiondetails { get; set; }
    
        public virtual int InsertConsumer(string userId, string phone1, string email)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var phone1Parameter = phone1 != null ?
                new ObjectParameter("Phone1", phone1) :
                new ObjectParameter("Phone1", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertConsumer", userIdParameter, phone1Parameter, emailParameter);
        }
    
        public virtual int InsertConsumerBillDetails(string consumerId, string merchantId, Nullable<decimal> billAmount, Nullable<System.DateTime> visitDate)
        {
            var consumerIdParameter = consumerId != null ?
                new ObjectParameter("ConsumerId", consumerId) :
                new ObjectParameter("ConsumerId", typeof(string));
    
            var merchantIdParameter = merchantId != null ?
                new ObjectParameter("MerchantId", merchantId) :
                new ObjectParameter("MerchantId", typeof(string));
    
            var billAmountParameter = billAmount.HasValue ?
                new ObjectParameter("BillAmount", billAmount) :
                new ObjectParameter("BillAmount", typeof(decimal));
    
            var visitDateParameter = visitDate.HasValue ?
                new ObjectParameter("VisitDate", visitDate) :
                new ObjectParameter("VisitDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertConsumerBillDetails", consumerIdParameter, merchantIdParameter, billAmountParameter, visitDateParameter);
        }
    
        public virtual ObjectResult<GetConsumerCountryDetails_Result> GetConsumerCountryDetails(string cId)
        {
            var cIdParameter = cId != null ?
                new ObjectParameter("CId", cId) :
                new ObjectParameter("CId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConsumerCountryDetails_Result>("GetConsumerCountryDetails", cIdParameter);
        }
    
        public virtual ObjectResult<GetConsumerForBirthDay_Result> GetConsumerForBirthDay()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConsumerForBirthDay_Result>("GetConsumerForBirthDay");
        }
    }
}
